#!/usr/bin/env ruby

# These two methods were generated by ChatGPT, rather brilliantly I think.

# Note: the AI didn't include '+ 1' for the x coordinate, which messed up
# the calculation - if we assume a,c,e,g are 'odd' numbers and odd with odd
# == dark. An odd number + odd number is an even number. IOW, `a` needs to be 1
# not 0, then the odd/even test works correctly.

# More succinct. The basic idea is that if the values of the coordinates add
# up to an even number, then the square is dark. If we see the letters as
# (a=1,b=2,c=3,etc), then we can simply add the two together if it is even
# it's dark. The bitwise AND with 1 will evaluate to 1 for even and 0 for odd.
# I leave that as an exercise for the reader.
def chess_square_color(coordinate)
  (coordinate[0].ord + coordinate[1].ord) & 1 ? "light" : "dark"
end

def random_chess_coordinate
  letters = ('a'..'h').to_a
  x = letters.sample
  y = rand(1..8)
  "#{x}#{y}"
end

puts "This game will test your knowledge of what color each square of a chess board"
puts "is. Doing this without looking at a chess board will help visualize the"
print "board in your mind.\n\n"
print "Enter 0 to quit.\n\n"

coord = nil
while true
  coord = random_chess_coordinate unless coord

  print "What color is #{coord}? "
  guess = gets.chomp.downcase

  if guess == '0'
    break
  elsif not (guess == 'light' or guess == 'dark')
    puts "Invalid response. Valid responses are light or dark."
    next
  elsif guess == chess_square_color(coord)
    puts "Correct!"
  else
    puts "Wrong you fool!"
  end

  coord = nil

  # Newline for separation and cleanliness
  print "\n"
end
